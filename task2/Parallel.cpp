// Составить описание класса для объектов-векторов, 
// задаваемых координатами концов в трехмерном пространстве. 
// Обеспечить операции сложения и вычитания векторов с 
// получением нового вектора (суммы или разности), вычисления 
// скалярного произведения двух векторов, длины вектора,  
// косинуса угла между векторами. Операции реализовать через 
// перегрузку операторов

#include <iostream>
using namespace std;

// Класс Parallel (Параллелепипед)
class Parallel {
private:
    double a, b, H;  // Стороны основания (a и b) и высота (H)

public:
    // Конструктор, инициализирующий стороны основания и высоту
    Parallel(double a0, double b0, double H0) : a(a0), b(b0), H(H0) {}

    // Метод для вычисления площади основания
    double getSo() const {
        return a * b;
    }

    // Метод для вычисления площади боковой поверхности
    double getSb() const {
        return 2 * (a + b) * H;
    }

    // Метод для вычисления полной площади поверхности
    double getSp() const {
        return 2 * (a * b + a * H + b * H);
    }
};

int main() {
    // Создаем два объекта класса Parallel с различными параметрами
    Parallel p1(4.0, 5.0, 6.0);  // Параллелепипед с основаниями 4 и 5, высотой 6
    Parallel p2(3.0, 7.0, 2.0);  // Параллелепипед с основаниями 3 и 7, высотой 2

    // Выводим площади для первого параллелепипеда
    cout << "Для первого параллелепипеда:" << endl;
    cout << "Площадь основания: " << p1.getSo() << endl;
    cout << "Площадь боковой поверхности: " << p1.getSb() << endl;
    cout << "Полная площадь поверхности: " << p1.getSp() << endl;

    cout << endl;

    // Выводим площади для второго параллелепипеда
    cout << "Для второго параллелепипеда:" << endl;
    cout << "Площадь основания: " << p2.getSo() << endl;
    cout << "Площадь боковой поверхности: " << p2.getSb() << endl;
    cout << "Полная площадь поверхности: " << p2.getSp() << endl;

    return 0;
}